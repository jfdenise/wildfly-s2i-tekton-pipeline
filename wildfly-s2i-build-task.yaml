apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: wildfly-s2i-build-task
spec:
  description: >-
    WildFly s2i build task. This tasks operates an S2I build then generates a DockerFile to produce a runtime image
    containing the provision WildFly server and deployments (if any).
    This task creates a dockerFile result and a dockerBuildContext result to be consumed by following task in the pipeline
    in order to build the runtime image.
    If caching is enabled, the task generates 2 DockerFiles, one for the server and one for the application from the server image.
    The serverDockerFile result contains the path to the server DockerFile. The result generateServerImage is set to true.
  params:
   - name: contextDir
     type: string
     default: ""
     description: "The sub-directory where the application source code exists."
   - name: MAVEN_OPTS
     type: string
     default: ""
     description: "JVM options passed to maven. Computed automatically at build time."
   - name: MAVEN_ARGS_APPEND
     type: string
     default: ""
     description: "Additional Maven arguments."
   - name: MAVEN_S2I_ARTIFACT_DIRS
     type: string
     default: ""
     description: "Relative paths of source directories to scan for build output. Defaults to **target**"
   - name: builderImageVersion
     type: string
     default: "latest"
     description: "WildFly s2i builder image version."
   - name: runtimeImageVersion
     type: string
     default: "latest"
     description: "WildFly runtime image version."
   - name: builderImage
     type: string
     default: "quay.io/wildfly/wildfly-s2i"
     description: "WildFly s2i builder image to use. Can reference a custom WildFly builder image."
   - name: runtimeImage
     type: string
     default: "quay.io/wildfly/wildfly-runtime"
     description: "WildFly s2i runtime image to use when generating the application image DockerFile"
   - name: namespace
     default: "$(context.pipelineRun.namespace)"
     description: "The namespace where to push the image"
   - name: dockerRegistry
     default: "image-registry.openshift-image-registry.svc:5000"
     description: "The docker Registry URL"
   - name: cacheId
     type: string
     default: ""
     description: "An ID to use to cache the server. Enables caching of server."
   - name: cacheImageStream
     type: string
     default: ""
     description: "The name of the imageStream that contains the server. Used as from image of the application image (when caching is enabled)"
   - name: clearCache
     type: string
     default: "false"
     description: "Set to true to clear the server in the cache. Meaningless if cache is not set."
   - name: imageName
     type: string
     default: ""
  workspaces:
    - name: sources
      description: The directory containing the sources.
    - name: maven-cache
      description: The maven repository cache
    - name: server-cache
      description: The server cache
  results:
    - name: dockerFile
      description: The runtime image generated docker file path.
    - name: dockerBuildContext
      description: The path of the build context.
    - name: serverDockerFile
      description: The image that only contains the server generated docker file path. Valid when caching is enabled.
    - name: generateServerImage
      description: True when the DockerFile for the image containing the server has been generated. Valid when caching is enabled.
  steps:
    - name: s2i-build
      securityContext:
        runAsUser: 0
      image: "$(params.builderImage):$(params.builderImageVersion)"
      workingDir: $(workspaces.sources.path)
      env:
        - name: MAVEN_ARGS_APPEND
          value: $(params.MAVEN_ARGS_APPEND)
        - name: MAVEN_OPTS
          value: $(params.MAVEN_OPTS)
        - name: MAVEN_LOCAL_REPO
          value: $(workspaces.maven-cache.path)
        - name: WILDFLY_RUNTIME_IMAGE
          value: $(params.runtimeImage)
        - name: WILDFLY_RUNTIME_IMAGE_VERSION
          value: $(params.runtimeImageVersion)
      script: |
        #!/usr/bin/env sh
        set -eu
        
        #Assembly expects source to be in src sub directory of S2I_DESTINATION_DIR
        srcDir="$(workspaces.sources.path)"
        
        s2iDestinationDir="$srcDir/s2i_destination_dir"
        rm -rf "$s2iDestinationDir"
        export S2I_DESTINATION_DIR="$s2iDestinationDir"
        echo "source content"
        ls -al  $srcDir
        contextDir="$(params.contextDir)"
        if [ ! -z "$contextDir" ]; then
          srcDir="$srcDir/$contextDir"
        fi
        s2iSourceDir="$s2iDestinationDir/src"
        
        mkdir -p "$s2iSourceDir"
        mv "$srcDir"/* "$s2iSourceDir" > /dev/null 2>&1 || true
        artifactDir="$(params.MAVEN_S2I_ARTIFACT_DIRS)"
        if [ ! -z "$artifactDir" ]; then
          export MAVEN_S2I_ARTIFACT_DIRS="$artifactDir"
        fi
        
        # Server cache handling
        serverCache=$(params.cacheId)
        if [ ! -z "$serverCache" ]; then
          echo "Server caching is enabled"
          clearCache=$(params.clearCache)
          cacheDir="$(workspaces.server-cache.path)/$serverCache"
          if [ "$clearCache" == "true" ]; then
            echo "Clearing $serverCache from cache"
            rm -rf "$cacheDir"
          fi
          if [ -d "$cacheDir" ]; then
            echo "A server exists for $serverCache, disabling provisioning."
            export MAVEN_ARGS_APPEND="${MAVEN_ARGS_APPEND} -Dwildfly.package.skip=true"
            cp -r "$cacheDir" "$JBOSS_HOME"
          else
            echo "A server doesn't exist for $serverCache, provisioning is enabled."
          fi
        fi
        
        /usr/local/s2i/assemble
      
        # Generate Dockerfile file and create docker build context
        # To be consumed by task that does docker build (kaniko, buildah,...)
        dockerDirName="wf-docker-build"
        dockerFileName="Dockerfile"
        serverDockerFileName="ServerDockerfile"
        dockerBuildContext="$s2iDestinationDir/$dockerDirName"
        dockerFile="$dockerBuildContext/$dockerFileName"
        serverDockerFile="$dockerBuildContext/$serverDockerFileName"
        mkdir -p "$dockerBuildContext"
        
        mv "$JBOSS_HOME/standalone/deployments" "$dockerBuildContext"
        if [ ! -z "$serverCache" ]; then
          serverImage=$(params.dockerRegistry)/$(params.namespace)/$(params.cacheImageStream)
          echo "Splitting server and deployment into 2 images"
          if [ ! -d "$cacheDir" ]; then
            echo "Installing server $serverCache in cache"
            echo "Building server runtime image from $WILDFLY_RUNTIME_IMAGE:$WILDFLY_RUNTIME_IMAGE_VERSION image. Server image is $serverImage:$serverCache"
            cp -r "$JBOSS_HOME" "$cacheDir";
        cat <<EOF > "$serverDockerFile"
        FROM $WILDFLY_RUNTIME_IMAGE:$WILDFLY_RUNTIME_IMAGE_VERSION
        COPY --chown=jboss:root server \$JBOSS_HOME
        RUN chmod -R ug+rwX \$JBOSS_HOME
        EOF
            echo -n "s2i_destination_dir/$dockerDirName/$serverDockerFileName" > $(results.serverDockerFile.path)
            echo -n "true" > $(results.generateServerImage.path)
          fi
          cat <<EOF > "$dockerFile"
        FROM $serverImage:$serverCache
        COPY --chown=jboss:root deployments $JBOSS_HOME/standalone/deployments
        RUN chmod -R ug+rwX \$JBOSS_HOME
        EOF
        else
          echo "Building runtime image from $WILDFLY_RUNTIME_IMAGE:$WILDFLY_RUNTIME_IMAGE_VERSION image, copying server and deployment (if any) to it."
        cat <<EOF > "$dockerFile"
        FROM $WILDFLY_RUNTIME_IMAGE:$WILDFLY_RUNTIME_IMAGE_VERSION
        COPY --chown=jboss:root server \$JBOSS_HOME
        COPY --chown=jboss:root deployments $JBOSS_HOME/standalone/deployments
        RUN chmod -R ug+rwX \$JBOSS_HOME
        EOF
        fi
        mv "$JBOSS_HOME" "$dockerBuildContext"
        
        # The paths are relative to the shared workspace.
        echo -n "s2i_destination_dir/$dockerDirName/$dockerFileName" > $(results.dockerFile.path)
        echo -n "s2i_destination_dir/$dockerDirName" > $(results.dockerBuildContext.path)