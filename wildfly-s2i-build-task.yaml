apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: wildfly-s2i-build-task
spec:
  description: >-
    WildFly s2i build task. This tasks operates an S2I build then generates a DockerFile to produce a runtime image
    containing the provision WildFly server and deployments (if any).
    This task creates a dockerFile result and a dockerBuildContext result to be consumed by following task in the pipeline
    in order to build the runtime image.
  params:
   - name: contextDir
     type: string
     default: ""
     description: "The sub-directory where the application source code exists."
   - name: MAVEN_OPTS
     type: string
     default: ""
     description: "JVM options passed to maven. Computed automatically at build time."
   - name: MAVEN_ARGS_APPEND
     type: string
     default: ""
     description: "Additional Maven arguments."
   - name: MAVEN_S2I_ARTIFACT_DIRS
     type: string
     default: ""
     description: "Relative paths of source directories to scan for build output. Defaults to **target**"
   - name: GALLEON_PROVISION_LAYERS
     type: string
     default: ""
     description: "Deprecated by the usage of the wildfly-maven-plugin. List of Galleon layers to provision."
   - name: GALLEON_PROVISION_FEATURE_PACKS
     type: string
     default: ""
     description: "Deprecated by the usage of the wildfly-maven-plugin. List of Galleon feature-packs to provision."
   - name: builderImageVersion
     type: string
     default: "latest"
     description: "WildFly s2i builder image version."
   - name: runtimeImageVersion
     type: string
     default: "latest"
     description: "WildFly runtime image version."
   - name: builderImage
     type: string
     default: "quay.io/wildfly/wildfly-s2i"
     description: "WildFly s2i builder image to use. Can reference a custom WildFly builder image."
   - name: runtimeImage
     type: string
     default: "quay.io/wildfly/wildfly-runtime"
     description: "WildFly s2i runtime image to use when generating the application image DockerFile"
   - name: buildBuilder
     type: string
     default: "false"
     description: >-
       When building a custom WildFly S2I builder image, set this to true.
   - name: deployOnlyRuntimeImageName
     type: string
     default: ""
     description: "WildFly s2i runtime image name that must already contain a WildFly server."
   - name: namespace
     default: "$(context.pipelineRun.namespace)"
     description: "The namespace where to push the image"
   - name: dockerRegistry
     default: "image-registry.openshift-image-registry.svc:5000"
     description: "The docker Registry URL"
   - name: cache
     type: string
     default: ""
     description: "A name to use to cache the server"
   - name: clearCache
     type: string
     default: "false"
     description: "Set to true to clear the server in the cache. Meaningless if cache is not set."
  workspaces:
    - name: sources
      description: The directory containing the sources.
    - name: maven-cache
      description: The maven repository cache
    - name: server-cache
      description: The server cache
  results:
    - name: dockerFile
      description: The runtime image generated docker file path.
    - name: builderDockerFile
      description: The builder image generated docker file path. When buildBuilder is set to true. 
    - name: dockerBuildContext
      description: The path of the build context.
  steps:
    - name: s2i-build
      securityContext:
        runAsUser: 0
      image: "$(params.builderImage):$(params.builderImageVersion)"
      workingDir: $(workspaces.sources.path)
      env:
        - name: MAVEN_ARGS_APPEND
          value: $(params.MAVEN_ARGS_APPEND)
        - name: MAVEN_OPTS
          value: $(params.MAVEN_OPTS)
        - name: MAVEN_LOCAL_REPO
          value: $(workspaces.maven-cache.path)
        - name: GALLEON_PROVISION_LAYERS
          value: $(params.GALLEON_PROVISION_LAYERS)
        - name: GALLEON_PROVISION_FEATURE_PACKS
          value: $(params.GALLEON_PROVISION_FEATURE_PACKS)
        - name: WILDFLY_RUNTIME_IMAGE
          value: $(params.runtimeImage)
        - name: WILDFLY_BUILDER_IMAGE
          value: $(params.builderImage)
        - name: WILDFLY_RUNTIME_IMAGE_VERSION
          value: $(params.runtimeImageVersion)
        - name: WILDFLY_BUILDER_IMAGE_VERSION
          value: $(params.builderImageVersion)
      script: |
        #!/usr/bin/env sh
        set -eu
        
        #Assembly expects source to be in src sub directory of S2I_DESTINATION_DIR
        srcDir="$(workspaces.sources.path)"
        
        s2iDestinationDir="$srcDir/s2i_destination_dir"
        rm -rf "$s2iDestinationDir"
        export S2I_DESTINATION_DIR="$s2iDestinationDir"
        echo "source content"
        ls -al  $srcDir
        buildBuilder=$(params.buildBuilder)
        if [ "$buildBuilder" == "false" ]; then
          contextDir="$(params.contextDir)"
          if [ ! -z "$contextDir" ]; then
            srcDir="$srcDir/$contextDir"
          fi
          s2iSourceDir="$s2iDestinationDir/src"
          mkdir -p "$s2iSourceDir"
          mv "$srcDir"/* "$s2iSourceDir"
        else
          echo "No sources to build"
          mkdir -p "$s2iDestinationDir"
        fi
        artifactDir="$(params.MAVEN_S2I_ARTIFACT_DIRS)"
        if [ ! -z "$artifactDir" ]; then
          export MAVEN_S2I_ARTIFACT_DIRS="$artifactDir"
        fi
        
        if [ ! -z "$GALLEON_PROVISION_FEATURE_PACKS" ]; then
          echo "Provisioning Galleon feature-packs: $GALLEON_PROVISION_FEATURE_PACKS"
        fi
        if [ ! -z "$GALLEON_PROVISION_LAYERS" ]; then
          echo "Provisioning Galleon layers: $GALLEON_PROVISION_LAYERS"
        fi
        
        # Server cache handling
        serverCache=$(params.cache)
        if [ ! -z "$serverCache" ]; then
          echo "Server caching is enabled"
          clearCache=$(params.clearCache)
          cacheDir="$(workspaces.server-cache.path)/$serverCache"
          if [ "$clearCache" == "true" ]; then
            echo "Clearing $serverCache from cache"
            rm -rf "$cacheDir"
          fi
          
          if [ -d "$cacheDir" ]; then
            echo "A server exists for $serverCache, disabling provisioning."
            export MAVEN_ARGS_APPEND="${MAVEN_ARGS_APPEND} -Dwildfly.package.skip=true"
            cp -r "$cacheDir" "$JBOSS_HOME"
          else
            echo "A server doesn't exist for $serverCache, provisioning is enabled."
          fi
        fi
        
        /usr/local/s2i/assemble
      
        # Generate Dockerfile file and create docker build context
        # To be consumed by task that does docker build (kaniko, buildah,...)
        dockerDirName="wf-docker-build"
        dockerFileName="Dockerfile"
        dockerBuildContext="$s2iDestinationDir/$dockerDirName"
        dockerFile="$dockerBuildContext/$dockerFileName"
        mkdir -p "$dockerBuildContext"
        
        deployOnlyRuntimeImageName=$(params.deployOnlyRuntimeImageName)
        if [ -z "$deployOnlyRuntimeImageName" ]; then
        echo "Building runtime image from $WILDFLY_RUNTIME_IMAGE:$WILDFLY_RUNTIME_IMAGE_VERSION image, copying server and deployment (if any) to it."
        echo "Splitting server and deployment into 2 layers"
        mv "$JBOSS_HOME/standalone/deployments" "$dockerBuildContext"
        if [ ! -z "$serverCache" ]; then
          if [ ! -d "$cacheDir" ]; then
            echo "Installing server $serverCache in cache"
            cp -r "$JBOSS_HOME" "$cacheDir";            
          fi
        fi
        mv "$JBOSS_HOME" "$dockerBuildContext"
         cat <<EOF > "$dockerFile"
           FROM $WILDFLY_RUNTIME_IMAGE:$WILDFLY_RUNTIME_IMAGE_VERSION
        COPY --chown=jboss:root server \$JBOSS_HOME
        COPY --chown=jboss:root deployments $JBOSS_HOME/standalone/deployments
        RUN chmod -R ug+rwX \$JBOSS_HOME
        EOF
        else
        deployOnlyRuntimeImage=$(params.dockerRegistry)/$(params.namespace)/$(params.deployOnlyRuntimeImageName)
        echo "Building runtime image from $deployOnlyRuntimeImage:$WILDFLY_RUNTIME_IMAGE_VERSION image, copying deployment to it."
        cp -r "$JBOSS_HOME/standalone/deployments" "$dockerBuildContext/"
         cat <<EOF > "$dockerFile"
        FROM $deployOnlyRuntimeImage:$WILDFLY_RUNTIME_IMAGE_VERSION
        COPY deployments/* \$JBOSS_HOME/standalone/deployments
        EOF
        fi
        # If we are building a builder, generate the Docker file for it too.
        if [ "$buildBuilder" == "true" ]; then
          echo "Building custom WildFly builder image from $WILDFLY_BUILDER_IMAGE:$WILDFLY_BUILDER_IMAGE_VERSION image, copying server to it."
          builderDockerFileName="BuilderDockerfile"
          builderDockerFile="$dockerBuildContext/$builderDockerFileName"
           cat <<EOF > "$builderDockerFile"
        FROM $WILDFLY_BUILDER_IMAGE:$WILDFLY_BUILDER_IMAGE_VERSION
        COPY server \$JBOSS_HOME
        USER root
        RUN chown -R jboss:root \$JBOSS_HOME && chmod -R ug+rwX \$JBOSS_HOME
        USER jboss
        EOF
          echo -n "s2i_destination_dir/$dockerDirName/$builderDockerFileName" > $(results.builderDockerFile.path)
        fi
        # The paths are relative to the shared workspace.
        echo -n "s2i_destination_dir/$dockerDirName/$dockerFileName" > $(results.dockerFile.path)
        echo -n "s2i_destination_dir/$dockerDirName" > $(results.dockerBuildContext.path)